[ ] #".root"# {protocol:"MCP", version:"1.1.0.0", standard:"PFSUS+EARS+LambdaJSON"} %% Root indicator line with protocol metadata. %%
# MerMaidContextProtocol (MCP) v1.1.0.0
## {type:Refs, scope:Project} %% This section defines project-scope references. 'type' and 'scope' are LambdaJSON keys. %%
- [[project-todo.mmcp.mmd]] -> {desc:"Project-wide TODOs, requirements, audit tasks (EARS format)."} %% '->' links a wikilink to a LambdaJSON description. %%
- [[MCP_legend.mmcp.mmd]] -> {desc:"EARS symbol legend & LambdaJSON addressing."}
- [[Documentation-Index.mmcp.mmd]] -> {desc:"Canonical documentation index."}
- [[core/steering/README.md]] -> {desc:"Steering & structure guide."}
## {type:Meta, group:Obsidian} %% Defines metadata for Obsidian, like graph groups and colors. %%
- [[MerMaidContextProtocol.version-1.0.0.0.mmcp.mmd]]
- #group/ears #group/format #group/protocol #color/blue
---
## {type:TOC} %% A machine-readable Table of Contents. %%
- [Protocol Overview](#protocol-overview)
- [LambdaJSON Standard](#lambdajson-standard)
- [System Architecture](#system-architecture)
- [Core Concepts](#core-concepts)
- [Notation Standards](#notation-standards)
- [Automation & Tooling](#automation--tooling)
- [Advanced Topics](#advanced-topics)
---
## {type:Section, title:"Protocol Overview"}
```mermaid
graph TD
    A["MCP"] --> B["TODOs"]
    A --> C["Legend"]
    A --> D["Doc Index"]
    A --> E["Steering"]
    F["Structure"] --> G["Summary"]
    F --> H["Addressing"]
    F --> I["Refs"]
    F --> J["Reqs"]
    F --> K["S.A.H.T.M."]
    F --> L["λ-Calculus"]
    F --> M["Mermaid Viz"]
    F --> N["CLI Automation"]
    F --> O["Self-Audit"]
    F --> P["Best Practices"]
    F --> Q["Speculative Ext."]
```
---
## {type:Section, title:"LambdaJSON Standard"} %% Defines the core specification for LambdaJSON. %%
- **{desc:"Primary machine-readable metadata layer."}** %% Curly braces denote a LambdaJSON object. %%
- **{purpose:["Search", "Conditional Logic", "Doc/Code Linking", "Token-Efficiency"]}** %% Values can be arrays. %%
- **{enhances:["EARS", "Wikilinks"]}** %% Shows how new standards augment old ones. %%
### {type:Subsection, title:"Syntax"}
- **Format:** `{key:value, key2:"string value", key3:[item1, item2]}`
- **Rules:**
    - `keys`: unquoted alphanumeric.
    - `values`: unquoted if simple, `"quoted"` if contains spaces/special chars.
### {type:Subsection, title:"Conditional Logic (`if`)"}
- **Purpose:** {desc:"Modular/conditional inclusion of content."}
- **Example:** `[ ] {type:Task, id:T-456, if:"ctx==release"} - Finalize notes.` %% The 'if' key provides a condition for parsers. %%
    - *Task considered active only if `context` is `release`.*
### {type:Subsection, title:"Node & Edge Types"}
- **Purpose:** {desc:"Standardized types for graph analysis & search."}
- **Node Def:** `{type:Req, id:R-001, p:1, desc:"System responsive."}` %% 'p' is shorthand for priority. %%
- **Edge Def (Mermaid):** `T-123 -- {type:dependsOn, target:R-001} --> R-001` %% Defines a typed relationship in a diagram. %%
- **Common Types:** `Task`, `Req` (Requirement), `Hypo` (Hypothesis), `Metric`, `Code`, `File`.
### {type:Subsection, title:"Code Comment Standardization"}
- **Purpose:** {desc:"Bi-directional link between docs & implementation."}
- **Example (Python):**
  ```python
  # {type:Code, id:FN-001, refs:[R-001], desc:"Calc score."}
  def calculate_user_score(user): ...
  ```
- **Benefits:** `Traceability`, `Auto-Doc`, `Context-Aware Linting`. %% Keywords can be used like tags. %%
---
## {type:Section, title:"System Architecture"}
- **{desc:"See full architecture diagram for detailed, layered breakdown of components."}**
```mermaid
graph TD
    subgraph "Layer 1: UI/Integrations"
        Frontend["Frontend"] -- API --> APIServer
        CLI["CLI"] -.-> Server
    end
    subgraph "Layer 2: Core Server"
        Server["Main Server"] --> CognitiveSwitchboard
        APIServer["API Gateway"] --> Server
    end
    subgraph "Layer 3: Cognitive Core"
        CognitiveSwitchboard --> Lobes["Lobes (Execution)"]
        CognitiveSwitchboard --> NeuralEngines["NN/Sci Engines"]
        CognitiveSwitchboard --> MemorySystems["Memory/Learning"]
    end
    subgraph "Layer 4: Foundational"
        MemorySystems -- persists --> DB["Databases"]
        CognitiveSwitchboard -- regulates --> HormoneSystem
        CognitiveSwitchboard -- optimizes --> GeneticTrigger
    end
end
```
---
## {type:Section, title:"Core Concepts"}
### {type:Subsection, title:"Cognitive Switchboard"}
- **Analogy:** {desc:"Agent's nervous system."}
- **Pattern:** {desc:"Reactive Switchboard."}
- **Function:** {desc:"Dynamically routes info between lobes & NNs."}
- **Paths:**
    - **Event Bus:** {desc:"High-speed, async, simple messages."}
    - **Spinal Cord:** {desc:"Complex data transformations for NNs."}
- **Benefit:** {desc:"Decoupled, responsive, scalable architecture."}

### {type:Subsection, title:"Spinal Cord Translation Layer"}
- **Function:** {desc:"Bridge between high-level lobes & low-level NNs."}
- **Tasks:** `Lobe->NN (Symbolic->Numeric)`, `NN->Lobe (Numeric->Symbolic)`. %% '->' is shorthand for 'becomes' or 'results in'. %%
- **Sequencing Alg:** {desc:"Wave Function Collapse (WFC) inspired."}
- **Benefit:** `Flexibility`, `Robustness`, `Emergent Behavior`.
---
## {type:Section, title:"Notation Standards"} %% A glossary of all shorthand notations. %%
- **Δ(state1, state2):** {desc:"Change/difference."}
- **ℵ(task):** {desc:"Cardinality/complexity."}
- **ᴛ(state, input) -> next:** {desc:"State transition."}
- **@:** {desc:"Reference (at/see)."}
- **~:** {desc:"Similar to."}
- **->:** {desc:"Becomes/results in."}
- **=>:** {desc:"Implies/leads to."}
- **P[1-5]:** {desc:"Priority (1=highest)."}
- **M[limit, recommendation]:** {desc:"Multitasking guidance."}
- **SD[β:rate, c:cost]:** {desc:"Speculative Decoding score."}
---
## {type:Section, title:"Automation & Tooling"}
### {type:Subsection, title:"CLI Regex Search"}
- **Purpose:** {desc:"Extract items from `.mmcp.mmd` files."}
- **EARS IDs:** `grep -Eo '[A-Z]{5}-[0-9]{3}\.[0-9]{3}' *.mmcp.mmd`
- **Actionables:** `grep -E '^\[[ x-]\]' *.mmcp.mmd`
### {type:Subsection, title:"CLON: Command-Line Object Notation"}
- **Concept:** {desc:"Functional, composable CLI syntax."}
- **Pipe:** `pipe[cmd1, cmd2]`
- **Map:** `map[cmd, list_cmd]`
- **Nameless Ref:** `τ` %% 'τ' is a placeholder for the output of the previous command. %%
### {type:Subsection, title:"CLI Utils"}
- **Ref:** [[core/tools/mcp_protocol_cli_utils.sh]] %% A direct reference to the utility script. %%
---
## {type:Section, title:"Advanced Topics"}
### {type:Subsection, title:"Speculative Protocol Extensions"}
- **AI-Driven Compliance:**
    - `{type:Hypo, id:H-001, desc:"AI can parse/correct docs better than humans."}`
    - `{type:Req, id:R-SPC-001, desc:"System SHALL provide secure API for AI compliance agents."}`
- **Dynamic Mermaid Generation:**
    - `{type:Hypo, id:H-002, desc:"System state can be used to auto-generate architecture diagrams."}`
    - `{type:Req, id:R-SPC-002, desc:"System SHALL expose real-time state API for visualization."}`
### {type:Subsection, title:"Validation: Proven Best Practices"}
- **Monolithic Regex:** {status:NotRecommended, reason:"Brittle, permissive."}
- **Stateful Validator:** {status:Recommended, reason:"Robust, specific, maintainable."}
    - **Checks:** `1. Presence of .root`, `2. Stateful line-by-line validation`, `3. Block integrity`.
---
## {type:Section, title:"Supporting Documents"}
- **Templates:** `{path:"core/templates/"}`
- **PFSUS Regex:** [[PFSUS.MMCP-Regex.MMCP.MMD]]