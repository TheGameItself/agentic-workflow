#!/usr/bin/env python3
"""
Simple verification script to check that stub elimination was successful
by scanning the source code directly.
"""

import os
import re
from pathlib import Path

def count_stubs_in_file(file_path):
    """Count different types of stubs in a file."""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Count NotImplementedError raises
        nie_count = len(re.findall(r'raise\s+NotImplementedError', content))
        
        # Count pass-only functions (simple heuristic)
        pass_only_count = len(re.findall(r'def\s+\w+\([^)]*\):\s*\n\s*pass\s*\n', content, re.MULTILINE))
        
        return {
            'not_implemented_error': nie_count,
            'pass_only_functions': pass_only_count
        }
    except Exception as e:
        return {'error': str(e)}

def main():
    """Verify stub elimination results."""
    print("=== STUB ELIMINATION VERIFICATION ===")
    print()
    
    # Key files that were modified
    key_files = [
        'src/mcp/scientific_engine.py',
        'src/mcp/lobes.py',
        'src/mcp/vector_memory.py',
        'src/mcp/lobes/experimental/error_detection/error_detection_lobe.py',
        'src/mcp/lobes/experimental/decision_making/decision_making_lobe.py',
        'src/mcp/lobes/experimental/mind_map/mind_map_engine.py',
        'src/mcp/lobes/experimental/advanced_engram/advanced_engram_engine.py',
        'src/mcp/lobes/experimental/multi_llm_orchestrator/multi_llm_orchestrator.py',
        'src/mcp/lobes/experimental/sensory_column/sensory_column.py',
        'src/mcp/lobes/experimental/simulated_reality.py'
    ]
    
    total_nie = 0
    total_pass = 0
    files_processed = 0
    
    for file_path in key_files:
        if os.path.exists(file_path):
            result = count_stubs_in_file(file_path)
            if 'error' not in result:
                nie = result['not_implemented_error']
                pass_only = result['pass_only_functions']
                total_nie += nie
                total_pass += pass_only
                files_processed += 1
                
                status = "‚úÖ" if nie == 0 and pass_only == 0 else "‚ö†Ô∏è"
                print(f"{status} {file_path}")
                if nie > 0:
                    print(f"   - NotImplementedError: {nie}")
                if pass_only > 0:
                    print(f"   - Pass-only functions: {pass_only}")
            else:
                print(f"‚ùå {file_path} - Error: {result['error']}")
        else:
            print(f"‚ùå {file_path} - File not found")
    
    print()
    print("=== SUMMARY ===")
    print(f"Files processed: {files_processed}")
    print(f"Total NotImplementedError instances: {total_nie}")
    print(f"Total pass-only functions: {total_pass}")
    
    if total_nie == 0:
        print("üéâ SUCCESS: All critical NotImplementedError instances eliminated!")
    else:
        print(f"‚ö†Ô∏è  WARNING: {total_nie} NotImplementedError instances still remain")
    
    if total_pass == 0:
        print("üéâ SUCCESS: All detected pass-only functions replaced!")
    else:
        print(f"‚ö†Ô∏è  INFO: {total_pass} pass-only functions still remain (may be intentional)")
    
    # Check for fallback implementation comments
    fallback_count = 0
    for file_path in key_files:
        if os.path.exists(file_path):
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                fallback_count += len(re.findall(r'# Fallback implementation - auto-generated by StubEliminationEngine', content))
            except:
                pass
    
    print(f"‚úÖ Fallback implementations added: {fallback_count}")
    
    return 0 if total_nie == 0 else 1

if __name__ == "__main__":
    exit(main())